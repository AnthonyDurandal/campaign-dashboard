-- id,c_date,campaign_name,category,campaign_id,impressions,mark_spent,clicks,leads,orders,revenue
\c campaign_db postgres

CREATE TABLE campaigns(
    id INT PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY, -- because there are IDs in the dateset
    c_date DATE NOT NULL CHECK(c_date < CURRENT_DATE),
    campaign_name VARCHAR(50),
    category VARCHAR(50),
    campaign_id INT NOT NULL,
    impressions INT NOT NULL CHECK(impressions >= 0),
    mark_spent DECIMAL NOT NULL CHECK(mark_spent >= 0),
    clicks INT NOT NULL CHECK(clicks >= 0),
    leads INT NOT NULL CHECK(leads >= 0),
    orders INT NOT NULL CHECK(orders >= 0),
    revenue DECIMAL NOT NULL CHECK(revenue >= 0)
);

COMMENT ON COLUMN campaigns.id IS 'id unique identifier';
COMMENT ON COLUMN campaigns.campaign_id IS 'id unique identifier';
COMMENT ON COLUMN campaigns.c_date IS 'date of spending of the marketing budget';
COMMENT ON COLUMN campaigns.campaign_name IS 'name description of campaign';
COMMENT ON COLUMN campaigns.category IS 'type of marketing source';
COMMENT ON COLUMN campaigns.impressions IS 'number of times the ad has been shown';
COMMENT ON COLUMN campaigns.mark_spent IS 'budget money spent on this campaign on this day';
COMMENT ON COLUMN campaigns.clicks IS 'how many people clicked on a banner (=visited website)';
COMMENT ON COLUMN campaigns.leads IS 'how many people signed up and left their credentials';
COMMENT ON COLUMN campaigns.orders IS 'how many people paid for the product';
COMMENT ON COLUMN campaigns.revenue IS 'how much money we earned';

ALTER TABLE campaigns ADD CONSTRAINT click_inf_impressions CHECK(clicks <= impressions); 
ALTER TABLE campaigns ADD CONSTRAINT leads_inf_click CHECK(leads <= clicks); 
ALTER TABLE campaigns ADD CONSTRAINT orders_inf_leads CHECK(orders <= leads); 


COPY campaigns(id,c_date,campaign_name,category,campaign_id,impressions,mark_spent,clicks,leads,orders,revenue)
FROM '/app/datasets/Marketing.csv'
DELIMITER ','
CSV HEADER;

COMMIT;

-- DROP FUNCTION IF EXISTS count_null;
-- CREATE OR REPLACE FUNCTION count_null(name_of_table varchar)
-- -- RETURNS SETOF RECORD
-- RETURNS TABLE
-- LANGUAGE plpgsql
-- AS $$
--     DECLARE
--         col RECORD;
--         query TEXT := 'SELECT ';
--     BEGIN
--         FOR col IN
--             SELECT column_name
--             FROM information_schema.columns
--             WHERE table_name = name_of_table
--         LOOP
--             query := query || ' SUM(CASE WHEN ' || col.column_name || ' IS NULL THEN 1 ELSE 0 END) AS ' || col.column_name || '_null_count, ';
--         END LOOP;
--         query := left(query, length(query) - 2) || ' FROM ' || name_of_table; -- remove the last comma and join
--         RETURN QUERY EXECUTE query;
--     END;
-- $$;